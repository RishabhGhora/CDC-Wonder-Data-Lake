{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhghora/Desktop/Codes/wonder/src/graphPage.js\";\nimport React, { Component, useEffect } from 'react';\nimport './graphPage.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Subcategory from './menus/Subcategory.js';\nimport Location2 from './menus/Location2.js';\nimport Dates from './menus/Dates.js';\nimport Demographics from './menus/Demographic.js';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport firebaseConfig from '../src/Firebase/firebase.js';\nimport { SphereSpinner } from \"react-spinners-kit\";\nimport LineChart from './LineChart.js';\nimport { Button } from 'reactstrap';\nfirebase.initializeApp(firebaseConfig);\n\nconst GraphPage = () => {\n  state = {\n    location: 'All States',\n    type: 'All Cancer',\n    year: '2018',\n    allStates: null,\n    georgia: null,\n    california: null,\n    twenty10: null,\n    lung: null,\n    data: null,\n    cases: {}\n  };\n  useEffect(() => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    storageRef.child('data/allStates.json').getDownloadURL().then(url => {\n      makeRequest(url);\n    });\n    storageRef.child('data/georgia.json').getDownloadURL().then(url => {\n      makeRequest(url);\n    });\n    storageRef.child('data/california.json').getDownloadURL().then(url => {\n      makeRequest(url);\n    });\n    storageRef.child('data/2010.json').getDownloadURL().then(url => {\n      makeRequest(url);\n    });\n    storageRef.child('data/lung.json').getDownloadURL().then(url => {\n      makeRequest(url);\n    });\n  });\n\n  function makeRequest(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'json';\n\n    xhr.onload = function (e) {\n      if (xhr.readyState === 4) {\n        if (xhr.status === 200) {\n          var data = xhr.response;\n        } else {\n          console.error(xhr.statusText);\n        }\n      }\n    };\n\n    xhr.onreadystatechange = () => {\n      var data = xhr.response;\n\n      if (data != null) {\n        for (let i = 0; i < data.length; i++) {\n          var dates = data[i].Date.split(',');\n          var date = dates[0].substring(0, 3) + ' ' + dates[1] + ' ' + dates[2] + ' 00:00:00' + ' GMT-0500 (Eastern Standard Time)';\n          date = new Date(date);\n          data[i].Date = date;\n        }\n\n        if (url.includes('allStates.json')) {\n          this.setState({\n            allStates: data,\n            data: data\n          });\n        } else if (url.includes('georgia.json')) {\n          this.setState({\n            georgia: data\n          });\n        } else if (url.includes('california.json')) {\n          this.setState({\n            california: data\n          });\n        } else if (url.includes('2010.json')) {\n          this.setState({\n            twenty10: data\n          });\n        } else if (url.includes('lung.json')) {\n          this.setState({\n            lung: data\n          });\n        }\n      }\n    };\n\n    xhr.open('GET', url);\n    xhr.send();\n  }\n\n  function updateLocation1(state) {\n    const _this$state = this.state,\n          allStates = _this$state.allStates,\n          georgia = _this$state.georgia,\n          california = _this$state.california;\n\n    if (state == 'All States') {\n      this.setState({\n        location: state,\n        data: allStates\n      });\n    } else if (state == 'Georgia, all counties') {\n      this.setState({\n        location: state,\n        data: georgia\n      });\n    } else if (state == 'California, all counties') {\n      this.setState({\n        location: state,\n        data: california\n      });\n    }\n  }\n\n  function updateType(type) {\n    if (type == 'Lung Cancer') {\n      this.setState({\n        type: type,\n        data: this.state.lung\n      });\n    } else {\n      this.setState({\n        type: type,\n        data: this.state.allStates\n      });\n    }\n  }\n\n  function updateYear(year) {\n    if (year == '2010') {\n      this.setState({\n        year: year,\n        data: this.state.twenty10\n      });\n    } else if (year == '2018') {\n      this.setState({\n        year: year,\n        data: this.state.allStates\n      });\n    } else {\n      this.setState({\n        year: year\n      });\n    }\n  }\n\n  function clearFilters() {\n    this.setState({\n      location: 'All States',\n      type: 'All Cancer',\n      year: '2018',\n      data: this.state.allStates\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"graphPage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"img\", {\n    className: \"logo\",\n    src: require('./wonder-logo.png'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(\"img\", {\n    className: \"home\",\n    src: require('./home.png'),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }), React.createElement(\"h1\", {\n    className: \"graph-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, type, \" Cases in \", location), React.createElement(\"h2\", {\n    className: \"graph-year\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, year), React.createElement(LineChart, {\n    className: \"graph\",\n    data: data,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), React.createElement(Button, {\n    color: \"primary\",\n    className: \"export-button\",\n    style: {\n      fontSize: '20px',\n      height: '45px',\n      marginBottom: '1rem',\n      width: '200px',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, \"Export\"), React.createElement(Button, {\n    color: \"primary\",\n    className: \"clear-button\",\n    onClick: this.clearFilters,\n    style: {\n      fontSize: '20px',\n      height: '45px',\n      marginBottom: '1rem',\n      width: '200px',\n      textAlign: 'center'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Clear\"), React.createElement(Subcategory, {\n    updateType: this.updateType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }), React.createElement(Location2, {\n    updateLocation: this.updateLocation1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }), React.createElement(Dates, {\n    updateYear: this.updateYear,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }), React.createElement(Demographics, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }), data == null ? React.createElement(\"div\", {\n    className: \"loader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(SphereSpinner, {\n    size: 50,\n    color: \"#2980b9\",\n    loading: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  })) : null);\n};\n\nexport default GraphPage;","map":{"version":3,"sources":["/Users/rishabhghora/Desktop/Codes/wonder/src/graphPage.js"],"names":["React","Component","useEffect","Subcategory","Location2","Dates","Demographics","firebase","firebaseConfig","SphereSpinner","LineChart","Button","initializeApp","GraphPage","state","location","type","year","allStates","georgia","california","twenty10","lung","data","cases","storage","storageRef","ref","child","getDownloadURL","then","url","makeRequest","xhr","XMLHttpRequest","responseType","onload","e","readyState","status","response","console","error","statusText","onreadystatechange","i","length","dates","Date","split","date","substring","includes","setState","open","send","updateLocation1","updateType","updateYear","clearFilters","require","fontSize","height","marginBottom","width","textAlign"],"mappings":"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","sourcesContent":["import React, { Component, useEffect} from 'react';\nimport './graphPage.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Subcategory from './menus/Subcategory.js';\nimport Location2 from './menus/Location2.js';\nimport Dates from './menus/Dates.js';\nimport Demographics from './menus/Demographic.js';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport firebaseConfig from '../src/Firebase/firebase.js';\nimport { SphereSpinner } from \"react-spinners-kit\";\nimport LineChart from './LineChart.js';\nimport { Button } from 'reactstrap';\n\nfirebase.initializeApp(firebaseConfig);\n\nconst GraphPage = () => {\n  state = {\n      location: 'All States',\n      type: 'All Cancer',\n      year: '2018',\n      allStates: null,\n      georgia: null,\n      california: null,\n      twenty10: null,\n      lung: null,\n      data: null,\n      cases: {},\n  };\n\n  useEffect(() => {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();    \n    storageRef.child('data/allStates.json').getDownloadURL().then(url => {\n      makeRequest(url)\n    });\n    storageRef.child('data/georgia.json').getDownloadURL().then(url => {\n      makeRequest(url)\n    });\n    storageRef.child('data/california.json').getDownloadURL().then(url => {\n     makeRequest(url)\n    });\n    storageRef.child('data/2010.json').getDownloadURL().then(url => {\n      makeRequest(url)\n    });\n    storageRef.child('data/lung.json').getDownloadURL().then(url => {\n      makeRequest(url)\n    });\n  })\n\n  function makeRequest(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'json';\n    xhr.onload = function(e){\n      if (xhr.readyState === 4){\n        if (xhr.status === 200){\n          var data = xhr.response\n        } else {\n          console.error(xhr.statusText)\n        }\n      }\n    }\n    xhr.onreadystatechange = () => {\n      var data = xhr.response;\n      if (data != null) {\n        for( let i = 0; i < data.length; i++) {\n          var dates = data[i].Date.split(',');\n          var date = dates[0].substring(0, 3) + ' ' + dates[1] + ' ' + dates[2] + ' 00:00:00' + ' GMT-0500 (Eastern Standard Time)';\n          date = new Date(date);\n          data[i].Date = date;\n        }\n        if (url.includes('allStates.json')) {\n          this.setState({\n            allStates: data,\n            data: data,\n          })\n        } else if (url.includes('georgia.json')) {\n          this.setState({\n            georgia: data,\n          })\n        } else if (url.includes('california.json')) {\n          this.setState({\n            california: data,\n          })\n        } else if (url.includes('2010.json')) {\n          this.setState ({\n            twenty10: data,\n          })\n        } else if (url.includes('lung.json')) {\n          this.setState({\n            lung: data,\n          })\n        }\n        \n      } \n    \n    }\n    xhr.open('GET', url);\n    xhr.send();\n\n  }\n  \n  function updateLocation1(state) {\n    const {allStates, georgia, california} = this.state;\n    if (state == 'All States') {\n      this.setState({ \n        location: state,\n        data: allStates,\n      });\n    } else if (state == 'Georgia, all counties') {\n      this.setState({ \n        location: state,\n        data: georgia,\n      });\n    } else if (state == 'California, all counties') {\n      this.setState({\n        location: state,\n        data: california,\n      })\n    }\n  }\n\n  function updateType(type) {\n    if (type == 'Lung Cancer') {\n      this.setState({\n        type: type,\n        data: this.state.lung,\n      })\n    } else {\n      this.setState({ \n        type: type,\n        data: this.state.allStates,\n      })\n    }\n  }\n\n  function updateYear(year) {\n    if (year == '2010') {\n      this.setState({\n        year: year,\n        data: this.state.twenty10,\n      })\n    } else if (year == '2018') {\n      this.setState({\n        year: year,\n        data: this.state.allStates,\n      })\n    \n    }  else {\n      this.setState({ \n        year: year \n      })\n    }\n  }\n\n  function clearFilters() {\n    this.setState({\n      location: 'All States',\n      type: 'All Cancer',\n      year: '2018',\n      data: this.state.allStates,\n    })\n  }\n\n  return (\n    <div className=\"graphPage\">\n      <img className=\"logo\" src={require('./wonder-logo.png')} />\n      <img className=\"home\" src={require('./home.png')} />\n      <h1 className=\"graph-title\">{type} Cases in {location}</h1>\n      <h2 className=\"graph-year\">{year}</h2>\n      <LineChart className=\"graph\" data={data} />\n      <Button color=\"primary\" className=\"export-button\" style={{ fontSize: '20px', height: '45px', marginBottom: '1rem', width: '200px', textAlign: 'center'}}>\n        Export \n      </Button> \n      <Button color=\"primary\" className=\"clear-button\" onClick={this.clearFilters} style={{ fontSize: '20px', height: '45px', marginBottom: '1rem', width: '200px', textAlign: 'center'}}>\n        Clear \n      </Button> \n      <Subcategory updateType = {this.updateType} />\n      <Location2 updateLocation = {this.updateLocation1}/>\n      <Dates updateYear = {this.updateYear}/>\n      <Demographics />\n      { data == null ? <div className=\"loader\"><SphereSpinner \n              size={50}\n              color=\"#2980b9\"\n              loading={true}\n          /></div> : null}\n    </div>\n  );\n}\n\n\n\nexport default GraphPage;"]},"metadata":{},"sourceType":"module"}