{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhghora/Desktop/Codes/wonder/src/graphPage.js\";\nimport React, { Component } from 'react';\nimport './graphPage.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Subcategory from './menus/Subcategory.js';\nimport Location2 from './menus/Location2.js';\nimport Dates from './menus/Dates.js';\nimport Demographics from './menus/Demographic.js';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport firebaseConfig from '../src/Firebase/firebase.js';\nimport { SphereSpinner } from \"react-spinners-kit\";\nimport LineChart from './LineChart.js';\nfirebase.initializeApp(firebaseConfig);\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateLocation1 = state => {\n      const _this$state = this.state,\n            allStates = _this$state.allStates,\n            georgia = _this$state.georgia,\n            california = _this$state.california;\n\n      if (state == 'All States') {\n        this.setState({\n          location: state,\n          data: allStates\n        });\n      } else if (state == 'Georgia') {\n        this.setState({\n          location: state,\n          data: georgia\n        });\n      } else if (state == 'California') {\n        this.setState({\n          location: state,\n          data: california\n        });\n      }\n    };\n\n    this.updateYear = year => {\n      this.setState({\n        year: year\n      });\n    };\n\n    this.makeRequest = url => {\n      var xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n\n      xhr.onload = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var data = xhr.response;\n          } else {\n            console.error(xhr.statusText);\n          }\n        }\n      };\n\n      xhr.onreadystatechange = () => {\n        var data = xhr.response;\n\n        if (data != null) {\n          for (let i = 0; i < data.length; i++) {\n            var dates = data[i].Date.split(',');\n            var date = dates[0].substring(0, 3) + ' ' + dates[1] + ' ' + dates[2] + ' 00:00:00' + ' GMT-0500 (Eastern Standard Time)';\n            date = new Date(date);\n            data[i].Date = date;\n          }\n\n          if (url.includes('allStates.json')) {\n            this.setState({\n              allStates: data,\n              data: data\n            });\n          } else if (url.includes('georgia.json')) {\n            this.setState({\n              georgia: data\n            });\n          } else if (url.includes('california.json')) {\n            this.setState({\n              california: data\n            });\n          }\n        }\n      };\n\n      xhr.open('GET', url);\n      xhr.send();\n    };\n\n    this.state = {\n      location: 'All States',\n      type: 'All Cancer',\n      allStates: null,\n      georgia: null,\n      california: null,\n      data: null,\n      cases: {}\n    };\n    this.updateLocation = this.updateLocation1;\n  }\n\n  componentDidMount() {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    storageRef.child('data/allStates.json').getDownloadURL().then(url => {\n      this.makeRequest(url);\n    });\n    storageRef.child('data/georgia.json').getDownloadURL().then(url => {\n      this.makeRequest(url);\n    });\n    storageRef.child('data/california.json').getDownloadURL().then(url => {\n      this.makeRequest(url);\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    const _this$state2 = this.state,\n          location = _this$state2.location,\n          allStates = _this$state2.allStates,\n          data = _this$state2.data;\n    return React.createElement(\"div\", {\n      className: \"graphPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"logo\",\n      src: require('./wonder-logo.png'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"home\",\n      src: require('./home.png'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      className: \"graph-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Cancer Cases \", location), React.createElement(LineChart, {\n      className: \"graph\",\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(Subcategory, {\n      className: \"subcategory\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }), React.createElement(Location2, {\n      updateLocation: this.updateLocation1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Dates, {\n      updateYear: this.updateYear,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Demographics, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), data == null ? React.createElement(\"div\", {\n      className: \"loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(SphereSpinner, {\n      size: 50,\n      color: \"#2980b9\",\n      loading: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    })) : null);\n  }\n\n}\n\nexport default GraphPage;","map":{"version":3,"sources":["/Users/rishabhghora/Desktop/Codes/wonder/src/graphPage.js"],"names":["React","Component","Subcategory","Location2","Dates","Demographics","firebase","firebaseConfig","SphereSpinner","LineChart","initializeApp","GraphPage","constructor","props","updateLocation1","state","allStates","georgia","california","setState","location","data","updateYear","year","makeRequest","url","xhr","XMLHttpRequest","responseType","onload","e","readyState","status","response","console","error","statusText","onreadystatechange","i","length","dates","Date","split","date","substring","includes","open","send","type","cases","updateLocation","componentDidMount","storage","storageRef","ref","child","getDownloadURL","then","render","log","require"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './graphPage.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Subcategory from './menus/Subcategory.js';\nimport Location2 from './menus/Location2.js';\nimport Dates from './menus/Dates.js';\nimport Demographics from './menus/Demographic.js';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport firebaseConfig from '../src/Firebase/firebase.js';\nimport { SphereSpinner } from \"react-spinners-kit\";\nimport LineChart from './LineChart.js';\n\nfirebase.initializeApp(firebaseConfig);\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      location: 'All States',\n      type: 'All Cancer',\n      allStates: null,\n      georgia: null,\n      california: null,\n      data: null,\n      cases: {},\n    }\n    this.updateLocation = this.updateLocation1\n}\nupdateLocation1 = (state) => {\n  const {allStates, georgia, california} = this.state;\n  if (state == 'All States') {\n    this.setState({ \n      location: state,\n      data: allStates,\n    });\n  } else if (state == 'Georgia') {\n    this.setState({ \n      location: state,\n      data: georgia,\n    });\n  } else if (state == 'California') {\n    this.setState({\n      location: state,\n      data: california,\n    })\n  }\n}\nupdateYear = (year) => {this.setState({ year: year })}\ncomponentDidMount() {\n  const storage = firebase.storage();\n  const storageRef = storage.ref();    \n  storageRef.child('data/allStates.json').getDownloadURL().then(url => {\n    this.makeRequest(url)\n  });\n  storageRef.child('data/georgia.json').getDownloadURL().then(url => {\n    this.makeRequest(url)\n  });\n  storageRef.child('data/california.json').getDownloadURL().then(url => {\n    this.makeRequest(url)\n  });\n\n\n\n}\n\nmakeRequest = (url) => {\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'json';\n    xhr.onload = function(e){\n      if (xhr.readyState === 4){\n        if (xhr.status === 200){\n          var data = xhr.response\n        } else {\n          console.error(xhr.statusText)\n        }\n      }\n    }\n    xhr.onreadystatechange = () => {\n      var data = xhr.response;\n      if (data != null) {\n        for( let i = 0; i < data.length; i++) {\n          var dates = data[i].Date.split(',');\n          var date = dates[0].substring(0, 3) + ' ' + dates[1] + ' ' + dates[2] + ' 00:00:00' + ' GMT-0500 (Eastern Standard Time)';\n          date = new Date(date);\n          data[i].Date = date;\n        }\n        if (url.includes('allStates.json')) {\n          this.setState({\n            allStates: data,\n            data: data,\n          })\n        } else if (url.includes('georgia.json')) {\n          this.setState({\n            georgia: data,\n          })\n        } else if (url.includes('california.json')) {\n          this.setState({\n            california: data,\n          })\n        }\n        \n      } \n    \n    }\n    xhr.open('GET', url);\n    xhr.send();\n\n}\n\n  \n  render() {\n    console.log(this.state);\n    const { location, allStates, data }  = this.state;\n  \n    return (\n      <div className=\"graphPage\">\n        <img className=\"logo\" src={require('./wonder-logo.png')} />\n        <img className=\"home\" src={require('./home.png')} />\n        <h1 className=\"graph-title\">Cancer Cases {location}</h1>\n        <LineChart className=\"graph\" data={data} />\n        <Subcategory className=\"subcategory\" />\n        <Location2 updateLocation = {this.updateLocation1}/>\n        <Dates updateYear = {this.updateYear}/>\n        <Demographics />\n        { data == null ? <div className=\"loader\"><SphereSpinner \n                size={50}\n                color=\"#2980b9\"\n                loading={true}\n            /></div> : null}\n      </div>\n    );\n  \n \n  }\n\n}\n\nexport default GraphPage;"]},"metadata":{},"sourceType":"module"}