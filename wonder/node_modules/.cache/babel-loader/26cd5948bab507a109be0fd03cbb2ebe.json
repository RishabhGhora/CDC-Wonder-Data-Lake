{"ast":null,"code":"var _jsxFileName = \"/Users/rishabhghora/Desktop/Codes/wonder/src/graphPage.js\";\nimport React, { Component } from 'react';\nimport './graphPage.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Subcategory from './menus/Subcategory.js';\nimport Location2 from './menus/Location2.js';\nimport Date from './menus/Date.js';\nimport Demographics from './menus/Demographic.js';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport firebaseConfig from '../src/Firebase/firebase.js';\nimport { SphereSpinner } from \"react-spinners-kit\";\nimport LineChart from './LineChart.js';\nfirebase.initializeApp(firebaseConfig);\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateLocation1 = state => {\n      this.setState({\n        location: state\n      });\n    };\n\n    this.makeRequest = url => {\n      var xhr = new XMLHttpRequest();\n      xhr.responseType = 'json';\n\n      xhr.onload = function (e) {\n        if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n            var data = xhr.response;\n          } else {\n            console.error(xhr.statusText);\n          }\n        }\n      };\n\n      xhr.onreadystatechange = () => {\n        var data = xhr.response;\n\n        if (data != null) {\n          for (let i = 0; i < data.length; i++) {\n            var dates = data[i].Date.split(',');\n            var date = dates[0].substring(0, 3) + ' ' + dates[1] + ' ' + dates[2] + ' ' + ' 00:00:00' + ' GMT-0500 (Eastern Standard Time)';\n            date = new Date(date);\n            data[i].Date = date;\n          }\n\n          this.setState({\n            allStates: data,\n            data: data\n          });\n        }\n      };\n\n      xhr.open('GET', url);\n      xhr.send();\n    };\n\n    this.state = {\n      location: 'All States',\n      allStates: null,\n      data: null,\n      cases: {}\n    };\n    this.updateLocation = this.updateLocation1;\n  }\n\n  componentDidMount() {\n    const storage = firebase.storage();\n    const storageRef = storage.ref();\n    storageRef.child('data/allStates.json').getDownloadURL().then(url => {\n      this.makeRequest(url);\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    const _this$state = this.state,\n          location = _this$state.location,\n          allStates = _this$state.allStates,\n          data = _this$state.data;\n    return React.createElement(\"div\", {\n      className: \"graphPage\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"logo\",\n      src: require('./wonder-logo.png'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"home\",\n      src: require('./home.png'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Cancer\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, location), React.createElement(Subcategory, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), React.createElement(Location2, {\n      updateLocation: this.updateLocation1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Date, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }), React.createElement(Demographics, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), data == null ? React.createElement(\"div\", {\n      className: \"loader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(SphereSpinner, {\n      size: 50,\n      color: \"#2980b9\",\n      loading: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })) : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Loaaded\"), React.createElement(LineChart, {\n      data: data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default GraphPage;","map":{"version":3,"sources":["/Users/rishabhghora/Desktop/Codes/wonder/src/graphPage.js"],"names":["React","Component","Subcategory","Location2","Date","Demographics","firebase","firebaseConfig","SphereSpinner","LineChart","initializeApp","GraphPage","constructor","props","updateLocation1","state","setState","location","makeRequest","url","xhr","XMLHttpRequest","responseType","onload","e","readyState","status","data","response","console","error","statusText","onreadystatechange","i","length","dates","split","date","substring","allStates","open","send","cases","updateLocation","componentDidMount","storage","storageRef","ref","child","getDownloadURL","then","render","log","require"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './graphPage.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Subcategory from './menus/Subcategory.js';\nimport Location2 from './menus/Location2.js';\nimport Date from './menus/Date.js'\nimport Demographics from './menus/Demographic.js';\nimport firebase from 'firebase';\nimport 'firebase/storage';\nimport firebaseConfig from '../src/Firebase/firebase.js';\nimport { SphereSpinner } from \"react-spinners-kit\";\nimport LineChart from './LineChart.js';\n\nfirebase.initializeApp(firebaseConfig);\n\nclass GraphPage extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      location: 'All States',\n      allStates: null,\n      data: null,\n      cases: {},\n    }\n    this.updateLocation = this.updateLocation1\n}\nupdateLocation1 = (state) => {this.setState({ location: state })}\n\ncomponentDidMount() {\n  const storage = firebase.storage();\n  const storageRef = storage.ref();    \n  storageRef.child('data/allStates.json').getDownloadURL().then(url => {\n    this.makeRequest(url)\n  });\n\n\n}\n\nmakeRequest = (url) => {\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'json';\n    xhr.onload = function(e){\n      if (xhr.readyState === 4){\n        if (xhr.status === 200){\n          var data = xhr.response\n        } else {\n          console.error(xhr.statusText)\n        }\n      }\n    }\n    xhr.onreadystatechange = () => {\n      var data = xhr.response;\n      if (data != null) {\n        for( let i = 0; i < data.length; i++) {\n          var dates = data[i].Date.split(',');\n          var date = dates[0].substring(0, 3) + ' ' + dates[1] + ' ' + dates[2] + ' ' + ' 00:00:00' + ' GMT-0500 (Eastern Standard Time)';\n          date = new Date(date);\n          data[i].Date = date;\n        }\n        this.setState({\n          allStates: data,\n          data: data,\n        })\n      } \n    \n    }\n    xhr.open('GET', url);\n    xhr.send();\n\n}\n  \n  render() {\n    console.log(this.state);\n    const { location, allStates, data }  = this.state;\n  \n    return (\n      <div className=\"graphPage\">\n        <img className=\"logo\" src={require('./wonder-logo.png')} />\n        <img className=\"home\" src={require('./home.png')} />\n        <h1>Cancer</h1>\n        <h2>{location}</h2>\n        <Subcategory />\n        <Location2 updateLocation = {this.updateLocation1}/>\n        <Date />\n        <Demographics />\n        { data == null ? <div className=\"loader\"><SphereSpinner \n                size={50}\n                color=\"#2980b9\"\n                loading={true}\n            /></div> : <div>Loaaded</div>}\n        <LineChart data={data} />\n      </div>\n    );\n  \n \n  }\n\n}\n\nexport default GraphPage;"]},"metadata":{},"sourceType":"module"}